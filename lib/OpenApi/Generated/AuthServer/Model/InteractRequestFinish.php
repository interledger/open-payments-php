<?php

namespace OpenPayments\OpenApi\Generated\AuthServer\Model;

class InteractRequestFinish extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];
    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The callback method that the AS will use to contact the client instance.
     *
     * @var string
     */
    protected $method;
    /**
     * Indicates the URI that the AS will either send the RO to after interaction or send an HTTP POST request.
     *
     * @var string
     */
    protected $uri;
    /**
     * Unique value to be used in the calculation of the "hash" query parameter sent to the callback URI, must be sufficiently random to be unguessable by an attacker.  MUST be generated by the client instance as a unique value for this request.
     *
     * @var string
     */
    protected $nonce;
    /**
     * The callback method that the AS will use to contact the client instance.
     *
     * @return string
     */
    public function getMethod(): string
    {
        return $this->method;
    }
    /**
     * The callback method that the AS will use to contact the client instance.
     *
     * @param string $method
     *
     * @return self
     */
    public function setMethod(string $method): self
    {
        $this->initialized['method'] = true;
        $this->method = $method;
        return $this;
    }
    /**
     * Indicates the URI that the AS will either send the RO to after interaction or send an HTTP POST request.
     *
     * @return string
     */
    public function getUri(): string
    {
        return $this->uri;
    }
    /**
     * Indicates the URI that the AS will either send the RO to after interaction or send an HTTP POST request.
     *
     * @param string $uri
     *
     * @return self
     */
    public function setUri(string $uri): self
    {
        $this->initialized['uri'] = true;
        $this->uri = $uri;
        return $this;
    }
    /**
     * Unique value to be used in the calculation of the "hash" query parameter sent to the callback URI, must be sufficiently random to be unguessable by an attacker.  MUST be generated by the client instance as a unique value for this request.
     *
     * @return string
     */
    public function getNonce(): string
    {
        return $this->nonce;
    }
    /**
     * Unique value to be used in the calculation of the "hash" query parameter sent to the callback URI, must be sufficiently random to be unguessable by an attacker.  MUST be generated by the client instance as a unique value for this request.
     *
     * @param string $nonce
     *
     * @return self
     */
    public function setNonce(string $nonce): self
    {
        $this->initialized['nonce'] = true;
        $this->nonce = $nonce;
        return $this;
    }
}